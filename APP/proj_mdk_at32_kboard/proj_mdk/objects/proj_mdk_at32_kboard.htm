<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\proj_mdk_at32_kboard.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\proj_mdk_at32_kboard.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Nov 14 17:04:24 2024
<BR><P>
<H3>Maximum Stack Usage =        292 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; interaction_kboard_update &rArr; handle_running_state &rArr; transer_send_keyboard &rArr; prototol_tlvc_pack &rArr; crc8
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[65]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1b]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">ACC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ACC_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1f]">ADC1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from at32f425_int.o(i.BusFault_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[31]">CAN1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[17]">CRM_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel3_2_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_4_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from at32f425_int.o(i.DebugMon_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[15]">ERTC_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[1a]">EXINT15_4_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[18]">EXINT1_0_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[19]">EXINT3_2_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from at32f425_int.o(i.HardFault_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[33]">I2C1_ERR_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2a]">I2C1_EVT_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[35]">I2C2_ERR_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2b]">I2C2_EVT_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from at32f425_int.o(i.MemManage_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from at32f425_int.o(i.NMI_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[32]">OTGFS1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[14]">PVM_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from at32f425_int.o(i.PendSV_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2c]">SPI1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2d]">SPI2_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[34]">SPI3_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from at32f425_int.o(i.SVC_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from at32f425_int.o(i.SysTick_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_at32f425.o(i.SystemInit) referenced from startup_at32f425.o(.text)
 <LI><a href="#[36]">TMR13_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[26]">TMR14_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[27]">TMR15_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[28]">TMR16_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[29]">TMR17_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[20]">TMR1_BRK_OVF_TRG_HALL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[21]">TMR1_CH_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[22]">TMR2_GLOBAL_IRQHandler</a> from bsp_mcu_tim.o(i.TMR2_GLOBAL_IRQHandler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[23]">TMR3_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[24]">TMR6_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[25]">TMR7_GLOBAL_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2e]">USART1_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[2f]">USART2_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[30]">USART4_3_IRQHandler</a> from bsp_usart3_dma_txrx.o(i.USART4_3_IRQHandler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from at32f425_int.o(i.UsageFault_Handler) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_at32f425.o(.text) referenced from startup_at32f425.o(RESET)
 <LI><a href="#[41]">__main</a> from __main.o(!!!main) referenced from startup_at32f425.o(.text)
 <LI><a href="#[3f]">callback_tlv_d</a> from protocol_handler.o(i.callback_tlv_d) referenced from protocol_handler.o(.data)
 <LI><a href="#[40]">callback_tlv_f</a> from protocol_handler.o(i.callback_tlv_f) referenced from protocol_handler.o(.data)
 <LI><a href="#[3b]">callback_tlv_p</a> from protocol_handler.o(i.callback_tlv_p) referenced from protocol_handler.o(.data)
 <LI><a href="#[3d]">callback_tlv_pack_l</a> from protocol_handler.o(i.callback_tlv_pack_l) referenced from protocol_handler.o(.data)
 <LI><a href="#[3c]">callback_tlv_pack_r</a> from protocol_handler.o(i.callback_tlv_pack_r) referenced from protocol_handler.o(.data)
 <LI><a href="#[3a]">callback_tlv_s</a> from protocol_handler.o(i.callback_tlv_s) referenced from protocol_handler.o(.data)
 <LI><a href="#[3e]">callback_tlv_v</a> from protocol_handler.o(i.callback_tlv_v) referenced from protocol_handler.o(.data)
 <LI><a href="#[39]">usart_data_call</a> from kboard.o(i.usart_data_call) referenced from kboard.o(i.interaction_kboard_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[41]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[42]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[44]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[113]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[114]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[45]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[115]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[116]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[46]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[117]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[118]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[119]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[120]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[121]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[122]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[123]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[124]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[125]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[126]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[127]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[128]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[129]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[50]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[12b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[12c]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[12d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[12e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[43]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[133]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[48]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[134]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; interaction_kboard_update &rArr; handle_running_state &rArr; transer_send_keyboard &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[135]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[66]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[136]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[51]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[1b]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CRM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ERTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXINT15_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXINT1_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXINT3_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ERR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EVT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>OTGFS1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TMR13_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TMR14_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR15_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR16_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR17_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TMR1_BRK_OVF_TRG_HALL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TMR1_CH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f425.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f425.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[53]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_tlvc_regist
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
</UL>

<P><STRONG><a name="[138]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_switch
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_pack
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_switch
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_upgrade_flag
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_update
</UL>

<P><STRONG><a name="[56]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[139]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_update
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_init
</UL>

<P><STRONG><a name="[58]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[13a]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[13d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[13e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[5b]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[47]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[5d]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[5f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[61]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[144]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[145]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[5c]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[147]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[63]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[62]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[52]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[67]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[68]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f425_int.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f425_int.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>Delay_ms</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, at32f425_clock_1.o(i.Delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_show
</UL>

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f425_int.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f425_int.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f425_int.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f425_int.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f425_int.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at32f425_int.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, system_at32f425.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_mcu_tim.o(i.TMR2_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR2_GLOBAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_flag_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_flag_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART4_3_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_usart3_dma_txrx.o(i.USART4_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART4_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f425_int.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f425.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>adc_base_config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_base_config))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[94]"></a>adc_base_default_para_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_base_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[98]"></a>adc_calibration_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_calibration_init))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[99]"></a>adc_calibration_init_status_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_calibration_init_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[9a]"></a>adc_calibration_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_calibration_start))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[9b]"></a>adc_calibration_status_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_calibration_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[8c]"></a>adc_dma_mode_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_deinit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[8d]"></a>adc_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_deinit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[96]"></a>adc_ordinary_channel_set</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, at32f425_adc.o(i.adc_ordinary_channel_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_ordinary_channel_set
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[97]"></a>adc_ordinary_conversion_trigger_set</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_ordinary_conversion_trigger_set))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[8b]"></a>adc_ordinary_software_trigger_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_adc.o(i.adc_ordinary_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_deinit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[6e]"></a>app_load</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, bsp_mcu_iap.o(i.app_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_load &rArr; nvic_irq_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_disable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
</UL>

<P><STRONG><a name="[d3]"></a>arpstate_adc</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, key_handler.o(i.arpstate_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpstate_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[73]"></a>bias_adc_update</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, key_handler.o(i.bias_adc_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bias_adc_update &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[7f]"></a>board_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = board_init &rArr; bsp_usart3_dma_txrx_init &rArr; perhi_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_txrx_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>bsp_key_gpio_init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, bsp_gpio_key.o(i.bsp_key_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_key_gpio_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[89]"></a>bsp_key_gpio_scan</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, key_handler.o(i.bsp_key_gpio_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_key_gpio_scan &rArr; read_key
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[6f]"></a>bsp_mcu_adc_deinit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_mcu_adc.o(i.bsp_mcu_adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_mcu_adc_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_software_trigger_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_load
</UL>

<P><STRONG><a name="[83]"></a>bsp_mcu_adc_init</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, bsp_mcu_adc.o(i.bsp_mcu_adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_mcu_adc_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_adc_clock_div_set
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_software_trigger_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_conversion_trigger_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_ordinary_channel_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_status_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init_status_get
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_default_para_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_base_config
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flexible_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[9c]"></a>bsp_pixel_led_flush</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_pixel_led.o(i.bsp_pixel_led_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_pixel_led_flush &rArr; buffer_update
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_show
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>

<P><STRONG><a name="[84]"></a>bsp_pixel_led_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_pixel_led.o(i.bsp_pixel_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = bsp_pixel_led_init &rArr; timer_config &rArr; tmr_output_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[db]"></a>bsp_pixel_led_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_pixel_led.o(i.bsp_pixel_led_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_pixel_led_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_show
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>

<P><STRONG><a name="[86]"></a>bsp_tim_init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, bsp_mcu_tim.o(i.bsp_tim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_tim_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_interrupt_enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_flag_clear
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cnt_dir_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[a6]"></a>bsp_usart3_dma_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bsp_usart3_dma_txrx.o(i.bsp_usart3_dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_usart3_dma_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flexible_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_txrx_init
</UL>

<P><STRONG><a name="[82]"></a>bsp_usart3_dma_txrx_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_usart3_dma_txrx.o(i.bsp_usart3_dma_txrx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bsp_usart3_dma_txrx_init &rArr; perhi_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perhi_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init1
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[d6]"></a>bsp_usart3_regist_data_call</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_usart3_dma_txrx.o(i.bsp_usart3_regist_data_call))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_init
</UL>

<P><STRONG><a name="[ab]"></a>bsp_usart3_update_trans</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_usart3_dma_txrx.o(i.bsp_usart3_update_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_usart3_update_trans
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_default_para_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ver
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uid
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transer_send_keyboard
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ack
</UL>

<P><STRONG><a name="[d1]"></a>convert_keys_to_notes</STRONG> (Thumb, 746 bytes, Stack size 0 bytes, key_handler.o(i.convert_keys_to_notes))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[be]"></a>crc16</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, crc.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_pack
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_switch
</UL>

<P><STRONG><a name="[e1]"></a>crc32</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, crc.o(i.crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_upgrade_flag
</UL>

<P><STRONG><a name="[bc]"></a>crc8</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, crc.o(i.crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_pack
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_switch
</UL>

<P><STRONG><a name="[90]"></a>crm_adc_clock_div_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f425_crm.o(i.crm_adc_clock_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[f1]"></a>crm_ahb_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f425_crm.o(i.crm_ahb_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[f3]"></a>crm_apb1_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f425_crm.o(i.crm_apb1_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[f2]"></a>crm_apb2_div_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f425_crm.o(i.crm_apb2_div_set))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[ef]"></a>crm_clock_source_enable</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f425_crm.o(i.crm_clock_source_enable))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[b4]"></a>crm_clocks_freq_get</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, at32f425_crm.o(i.crm_clocks_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[b8]"></a>crm_flag_get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, at32f425_crm.o(i.crm_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[b7]"></a>crm_hext_stable_wait</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, at32f425_crm.o(i.crm_hext_stable_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crm_hext_stable_wait &rArr; crm_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[70]"></a>crm_periph_clock_enable</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f425_crm.o(i.crm_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_load
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcc_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_gpio_init
</UL>

<P><STRONG><a name="[f0]"></a>crm_pll_config</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, at32f425_crm.o(i.crm_pll_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crm_pll_config
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[e2]"></a>crm_reset</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, at32f425_crm.o(i.crm_reset))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[f4]"></a>crm_sysclk_switch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f425_crm.o(i.crm_sysclk_switch))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[b5]"></a>crm_sysclk_switch_status_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_crm.o(i.crm_sysclk_switch_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[b9]"></a>data_ack</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, ota_handler.o(i.data_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = data_ack &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_pack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_resend_logic
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start
</UL>

<P><STRONG><a name="[81]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f425_clock_1.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[8e]"></a>dma_channel_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_dma.o(i.dma_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_deinit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[92]"></a>dma_default_para_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f425_dma.o(i.dma_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[ad]"></a>dma_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f425_dma.o(i.dma_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
</UL>

<P><STRONG><a name="[ac]"></a>dma_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f425_dma.o(i.dma_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
</UL>

<P><STRONG><a name="[91]"></a>dma_flexible_config</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, at32f425_dma.o(i.dma_flexible_config))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[93]"></a>dma_init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, at32f425_dma.o(i.dma_init))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[8f]"></a>dma_reset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, at32f425_dma.o(i.dma_reset))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_deinit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
</UL>

<P><STRONG><a name="[c2]"></a>flash_1kb_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_mcu_flash.o(i.flash_1kb_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_1kb_write &rArr; flash_halfword_program &rArr; flash_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_halfword_program
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
</UL>

<P><STRONG><a name="[c7]"></a>flash_8b_write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bsp_mcu_flash.o(i.flash_8b_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = flash_8b_write &rArr; flash_halfword_program &rArr; flash_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_unlock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_lock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_halfword_program
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_upgrade_flag
</UL>

<P><STRONG><a name="[c5]"></a>flash_halfword_program</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, at32f425_flash.o(i.flash_halfword_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_halfword_program &rArr; flash_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_8b_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_1kb_write
</UL>

<P><STRONG><a name="[c6]"></a>flash_lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f425_flash.o(i.flash_lock))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_8b_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_1kb_write
</UL>

<P><STRONG><a name="[c9]"></a>flash_operation_status_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, at32f425_flash.o(i.flash_operation_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait_for
</UL>

<P><STRONG><a name="[c8]"></a>flash_operation_wait_for</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f425_flash.o(i.flash_operation_wait_for))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flash_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_sector_erase
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_halfword_program
</UL>

<P><STRONG><a name="[c4]"></a>flash_sector_erase</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, at32f425_flash.o(i.flash_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_sector_erase &rArr; flash_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_wait_for
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_8b_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_1kb_write
</UL>

<P><STRONG><a name="[c3]"></a>flash_unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f425_flash.o(i.flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_8b_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_1kb_write
</UL>

<P><STRONG><a name="[ca]"></a>flash_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_mcu_flash.o(i.flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = flash_write &rArr; flash_1kb_write &rArr; flash_halfword_program &rArr; flash_operation_wait_for
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_1kb_write
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
</UL>

<P><STRONG><a name="[87]"></a>gpio_default_para_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f425_gpio.o(i.gpio_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_gpio_init
</UL>

<P><STRONG><a name="[88]"></a>gpio_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, at32f425_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mcu_adc_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_gpio_init
</UL>

<P><STRONG><a name="[ed]"></a>gpio_input_data_bit_read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f425_gpio.o(i.gpio_input_data_bit_read))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_key
</UL>

<P><STRONG><a name="[cb]"></a>gpio_pin_mux_config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, at32f425_gpio.o(i.gpio_pin_mux_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_pin_mux_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init1
</UL>

<P><STRONG><a name="[cc]"></a>handle_running_state</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, kboard.o(i.handle_running_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = handle_running_state &rArr; transer_send_keyboard &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transer_send_keyboard
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_keys_to_notes
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_gpio_scan
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpstate_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_update
</UL>

<P><STRONG><a name="[d4]"></a>interaction_kboard_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kboard.o(i.interaction_kboard_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = interaction_kboard_init &rArr; ota_upgrade_flag &rArr; send_fw &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_start_show
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_regist_data_call
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlvc_regist
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_upgrade_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>interaction_kboard_update</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, kboard.o(i.interaction_kboard_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = interaction_kboard_update &rArr; handle_running_state &rArr; transer_send_keyboard &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_upgrade
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>led_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, led_handler.o(i.led_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = led_set &rArr; bsp_pixel_led_flush &rArr; buffer_update
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_flush
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_tlv_pack_l
</UL>

<P><STRONG><a name="[d5]"></a>led_start_show</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, led_handler.o(i.led_start_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = led_start_show &rArr; bsp_pixel_led_flush &rArr; buffer_update
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_update
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_flush
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_init
</UL>

<P><STRONG><a name="[4d]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = main &rArr; interaction_kboard_update &rArr; handle_running_state &rArr; transer_send_keyboard &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_update
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[71]"></a>nvic_irq_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, at32f425_misc.o(i.nvic_irq_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_load
</UL>

<P><STRONG><a name="[a5]"></a>nvic_irq_enable</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, at32f425_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
</UL>

<P><STRONG><a name="[a4]"></a>nvic_priority_group_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at32f425_misc.o(i.nvic_priority_group_config))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
</UL>

<P><STRONG><a name="[dd]"></a>nvic_vector_table_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f425_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>ota_start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ota_handler.o(i.ota_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = ota_start &rArr; data_ack &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_tlv_s
</UL>

<P><STRONG><a name="[b1]"></a>ota_update</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ota_handler.o(i.ota_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ota_update
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_tlv_pack_r
</UL>

<P><STRONG><a name="[da]"></a>ota_upgrade</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ota_handler.o(i.ota_upgrade))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = ota_upgrade &rArr; ota_task &rArr; data_ack &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_task
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_resend_logic
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_update
</UL>

<P><STRONG><a name="[d8]"></a>ota_upgrade_flag</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ota_handler.o(i.ota_upgrade_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ota_upgrade_flag &rArr; send_fw &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_8b_write
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_init
</UL>

<P><STRONG><a name="[eb]"></a>protocol_tlvc_regist</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, protocol_tlvc.o(i.protocol_tlvc_regist))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = protocol_tlvc_regist &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlvc_regist
</UL>

<P><STRONG><a name="[ec]"></a>prototol_tlvc_decode</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, protocol_tlvc.o(i.prototol_tlvc_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prototol_tlvc_decode &rArr; decode_switch &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_call
</UL>

<P><STRONG><a name="[ba]"></a>prototol_tlvc_pack</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, protocol_tlvc.o(i.prototol_tlvc_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ver
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uid
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_fw
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transer_send_keyboard
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ack
</UL>

<P><STRONG><a name="[8a]"></a>read_key</STRONG> (Thumb, 786 bytes, Stack size 8 bytes, bsp_gpio_key.o(i.read_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_key
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_data_bit_read
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_key_gpio_scan
</UL>

<P><STRONG><a name="[e4]"></a>send_fw</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, firmware.o(i.send_fw))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = send_fw &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_pack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_upgrade_flag
</UL>

<P><STRONG><a name="[af]"></a>send_uid</STRONG> (Thumb, 76 bytes, Stack size 80 bytes, firmware.o(i.send_uid))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = send_uid &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_pack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_tlv_d
</UL>

<P><STRONG><a name="[b3]"></a>send_ver</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, firmware.o(i.send_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = send_ver &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_pack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_tlv_v
</UL>

<P><STRONG><a name="[7a]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[80]"></a>system_clock_config</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, at32f425_clock_1.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = system_clock_config &rArr; system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_pll_config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_hext_stable_wait
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_flag_get
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clock_source_enable
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb2_div_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_apb1_div_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_ahb_div_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_core_clock_update
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
</UL>

<P><STRONG><a name="[f5]"></a>system_core_clock_update</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, system_at32f425.o(i.system_core_clock_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = system_core_clock_update &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_sysclk_switch_status_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[c0]"></a>systick_clock_source_config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at32f425_misc.o(i.systick_clock_source_config))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[d7]"></a>tlvc_regist</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, protocol_handler.o(i.tlvc_regist))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tlvc_regist &rArr; protocol_tlvc_regist &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;protocol_tlvc_regist
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interaction_kboard_init
</UL>

<P><STRONG><a name="[df]"></a>tlvc_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, protocol_tlvc.o(i.tlvc_reset))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_resend_logic
</UL>

<P><STRONG><a name="[a0]"></a>tmr_base_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_base_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
</UL>

<P><STRONG><a name="[a1]"></a>tmr_cnt_dir_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_cnt_dir_set))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
</UL>

<P><STRONG><a name="[a3]"></a>tmr_counter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_counter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
</UL>

<P><STRONG><a name="[f8]"></a>tmr_dma_request_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_dma_request_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[6a]"></a>tmr_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_GLOBAL_IRQHandler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
</UL>

<P><STRONG><a name="[69]"></a>tmr_flag_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_GLOBAL_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>tmr_interrupt_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_tim_init
</UL>

<P><STRONG><a name="[f7]"></a>tmr_output_channel_config</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, at32f425_tmr.o(i.tmr_output_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tmr_output_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[f6]"></a>tmr_output_default_para_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_output_default_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[c1]"></a>tmr_output_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_tmr.o(i.tmr_output_enable))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_config
</UL>

<P><STRONG><a name="[d2]"></a>transer_send_keyboard</STRONG> (Thumb, 202 bytes, Stack size 184 bytes, data_transer_local.o(i.transer_send_keyboard))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = transer_send_keyboard &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_pack
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_update_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[6c]"></a>usart_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f425_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_3_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>usart_dma_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_usart.o(i.usart_dma_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perhi_init
</UL>

<P><STRONG><a name="[ea]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perhi_init
</UL>

<P><STRONG><a name="[6d]"></a>usart_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f425_usart.o(i.usart_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_3_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>usart_init</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, at32f425_usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_clocks_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perhi_init
</UL>

<P><STRONG><a name="[e8]"></a>usart_interrupt_enable</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, at32f425_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perhi_init
</UL>

<P><STRONG><a name="[6b]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, at32f425_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_3_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>usart_receiver_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_usart.o(i.usart_receiver_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perhi_init
</UL>

<P><STRONG><a name="[e6]"></a>usart_transmitter_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f425_usart.o(i.usart_transmitter_enable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perhi_init
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[f9]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[fc]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[101]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[ff]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[cf]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[14a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[14b]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[100]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[104]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[102]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[fb]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[fe]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
</UL>

<P><STRONG><a name="[103]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[ee]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[105]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[107]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[109]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[10d]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[10b]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_running_state
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[14d]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[10c]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[110]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[10e]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[108]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[fa]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[10f]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bias_adc_update
</UL>

<P><STRONG><a name="[111]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a9]"></a>gpio_init1</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bsp_usart3_dma_txrx.o(i.gpio_init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = gpio_init1 &rArr; gpio_pin_mux_config
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_default_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_txrx_init
</UL>

<P><STRONG><a name="[a8]"></a>nvic_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_usart3_dma_txrx.o(i.nvic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nvic_init &rArr; nvic_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_priority_group_config
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_txrx_init
</UL>

<P><STRONG><a name="[aa]"></a>perhi_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp_usart3_dma_txrx.o(i.perhi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = perhi_init &rArr; usart_init &rArr; crm_clocks_freq_get &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmitter_enable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receiver_enable
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmitter_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_txrx_init
</UL>

<P><STRONG><a name="[a7]"></a>rcc_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_usart3_dma_txrx.o(i.rcc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcc_init &rArr; crm_periph_clock_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_usart3_dma_txrx_init
</UL>

<P><STRONG><a name="[9d]"></a>buffer_update</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, bsp_pixel_led.o(i.buffer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = buffer_update
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_flush
</UL>

<P><STRONG><a name="[9e]"></a>dma_config</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bsp_pixel_led.o(i.dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dma_config
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flexible_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_enable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_counter_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_flush
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_init
</UL>

<P><STRONG><a name="[9f]"></a>timer_config</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, bsp_pixel_led.o(i.timer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_config &rArr; tmr_output_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pin_mux_config
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_periph_clock_enable
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_default_para_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_output_channel_config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_dma_request_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_cnt_dir_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tmr_base_init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pixel_led_init
</UL>

<P><STRONG><a name="[72]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_mcu_iap.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_load
</UL>

<P><STRONG><a name="[bb]"></a>decode_switch</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, protocol_tlvc.o(i.decode_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = decode_switch &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_decode
</UL>

<P><STRONG><a name="[de]"></a>ota_resend_logic</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ota_handler.o(i.ota_resend_logic))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = ota_resend_logic &rArr; data_ack &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlvc_reset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_upgrade
</UL>

<P><STRONG><a name="[e0]"></a>ota_task</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, ota_handler.o(i.ota_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ota_task &rArr; data_ack &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crm_reset
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_load
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_8b_write
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_upgrade
</UL>

<P><STRONG><a name="[3f]"></a>callback_tlv_d</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, protocol_handler.o(i.callback_tlv_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = callback_tlv_d &rArr; send_uid &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_handler.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>callback_tlv_f</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol_handler.o(i.callback_tlv_f))
<BR>[Address Reference Count : 1]<UL><LI> protocol_handler.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>callback_tlv_p</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, protocol_handler.o(i.callback_tlv_p))
<BR>[Address Reference Count : 1]<UL><LI> protocol_handler.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>callback_tlv_pack_l</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, protocol_handler.o(i.callback_tlv_pack_l))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = callback_tlv_pack_l &rArr; led_set &rArr; bsp_pixel_led_flush &rArr; buffer_update
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_handler.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>callback_tlv_pack_r</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, protocol_handler.o(i.callback_tlv_pack_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = callback_tlv_pack_r &rArr; ota_update
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_handler.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>callback_tlv_s</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, protocol_handler.o(i.callback_tlv_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = callback_tlv_s &rArr; ota_start &rArr; data_ack &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_handler.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>callback_tlv_v</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, protocol_handler.o(i.callback_tlv_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = callback_tlv_v &rArr; send_ver &rArr; prototol_tlvc_pack &rArr; crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> protocol_handler.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>usart_data_call</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, kboard.o(i.usart_data_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usart_data_call &rArr; prototol_tlvc_decode &rArr; decode_switch &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prototol_tlvc_decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kboard.o(i.interaction_kboard_init)
</UL>
<P><STRONG><a name="[106]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[fd]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[112]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[10a]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
